#!/usr/bin/env bash
#
# Quick bashscript to run phantomjs and detect any http errors with local resources
# TODO: handle different phantomjs version syntax changes with heredoc

#
# Functions
#

usage() {

    I_USAGE="
    Description:
      Run phantomjs against a url and show time taken and any failing local resources ([4,5]xx) status

    Dependencies: phantomjs

    Options:
    -u | --url) url to hit
    -t | --timeout) timeout in ms (10000)
    -j | --js) javascript file to run (default is autogenerated)
    -i | --ignore) ignore_args=\"--ignore-ssl-errors=true --ssl-protocol=any\"
    -d | --debug) debug_args='--debug=true'
    -h |--help) display help
    "
    echo "$I_USAGE"
    exit
}

detect_package_system(){
  [ -f /etc/debian_version ] && package_install_command="apt-get -y install"
  [ -f /etc/redhat-release ] && package_install_command="yum -y install"
  [ -f /usr/sbin/up2date-nox ] && package_install_command="/usr/sbin/up2date-nox -u"
}

fatal() { echo "$@" && echo "" ; logger -- "${PROGRAM_NAME} $@" ; exit 1 ;}

bootstrap_package(){
  local binary=$1
  which $binary 1>/dev/null && return
  if [ "$(id -u)" -eq "0" ];then
    $package_install_command $binary 2>&1 >/dev/null
  else
    fatal "Run as root to install $binary"
  fi
}

phantocurl(){
  phantom_args="$timeout"
if [ ! -f "$jsfile" ];then

cat << EOF > $jsfile
var webPage = require('webpage');
var page = webPage.create();
var exit_code = 0;
var args = require('system').args;
var address = args[1];
var timeout = args[2];
page.settings.resourceTimeout = timeout;

page.open(address, function(status) {
  console.log('Status: ' + status);
  // NOTE: phantomjs does not report http status
  if ( status !== 'success' ){
    console.log('Network failure');
    exit_code = 10;
  }
  phantom.exit(exit_code);
});

page.onResourceTimeout = function(e) {
  console.log(e.errorCode);   // it'll probably be 408
  console.log(e.errorString); // it'll probably be 'Network timeout on resource'
  console.log(e.url);         // the url whose request timed out
  phantom.exit(e.errorCode);
};

page.onResourceReceived = function(res) {
  if (res.stage === 'end') {
    console.log('url: ' + res.url);
    console.log('Status code: ' + res.status);
  }
  status_to_exit_code(res.status , res.url);
};

function status_to_exit_code (status , url) {
  var is_local = RegExp(address,'g');
  var is_not_found_or_error = RegExp('^[4-5]','g');
  if (is_local.test(url)) {
    if (is_not_found_or_error.test(status)) {
      phantom.exit(status);
    }
  }
};
EOF
fi
  echo "time phantomjs --cookies-file=/tmp/phantom.${USER}.cookie \
    $ignore_args \
    --load-images=false \
    $jsfile \"$url\" $phantom_args"
  time phantomjs --cookies-file=/tmp/phantom.${USER}.cookie \
    $ignore_args \
    --load-images=false \
    $jsfile "$url" $phantom_args


  exit-code-to-description $?
}

exit-code-to-description(){
    case $1 in
      0)   msg="OK";;
      1)   msg="the remote server refused connection the server is not accepting requests OR phantomjs runtime error";;
      2)   msg="the remote server closed the connection prematurely, before the entire reply was received and processed";;
      3)   msg="the remote host name was not found (invalid hostname)";;
      4)   msg="the connection to the remote server timed out";;
      5)   msg="the operation was canceled via calls to abort() or close() before it was finished.";;
      6)   msg="the SSL/TLS handshake failed and the encrypted channel could not be established. The sslErrors() signal should have been emitted.";;
      7)   msg="the connection was broken due to disconnection from the network, however the system has initiated roaming to another access point. The request should be resubmitted and will be processed as soon as the connection is re-established.";;
      8)   msg="the connection was broken due to disconnection from the network or failure to start the network.";;
      9)   msg="the background request is not currently allowed due to platform policy.";;
      10)  msg="unknown connection failure";;
      99)  msg="an unknown network-related error was detected";;
      101) msg="the connection to the proxy server was refused the proxy server is not accepting requests)";;
      102) msg="the proxy server closed the connection prematurely, before the entire reply was received and processed";;
      103) msg="the proxy host name was not found (invalid proxy hostname)";;
      104) msg="the connection to the proxy timed out or the proxy did not reply in time to the request sent";;
      105) msg="the proxy requires authentication in order to honour the request but did not accept any credentials offered (if any)";;

      199) msg="an unknown proxy-related error was detected";;
      202) msg="the operation requested on the remote content is not permitted";;
      204) msg="the remote server requires authentication to serve the content but the credentials provided were not accepted (if any)";;
      205) msg="the request needed to be sent again, but this failed for example because the upload data could not be read a second time.";;
      206) msg="the request could not be completed due to a conflict with the current state of the resource.";;
      207) msg="the requested resource is no longer available at the server.";;
      299) msg="an unknown error related to the remote content was detected";;
      301) msg="the Network Access API cannot honor the request because the protocol is not known";;
      302) msg="the requested operation is invalid for this protocol";;
      399) msg="a breakdown in protocol was detected (parsing error, invalid or unexpected responses, etc.)";;
      401) msg="the server encountered an unexpected condition which prevented it from fulfilling the request.";;
      402) msg="the server does not support the functionality required to fulfill the request.";;
      403) msg="the server is unable to handle the request at this time.";;
      499) msg="an unknown error related to the server response was detected";;
      *) msg="unknown"
    esac
    echo "$msg"
}

#
# defaults
#

PROGRAM_NAME=$(basename $0)
url="http://google.com"
timeout=10000
jsfile="/tmp/phantom.$USER.js"
ignore_args=""

#
# args
#

while : ;do
  case $1 in
    -u | --url) url=$2 ; shift 2 ;;
    -t | --timeout) timeout=$2 ; shift 2 ;;
    -j | --js) jsfile=$2 ; shift 2 ;;
    -i | --ignore) ignore_args="--ignore-ssl-errors=true --ssl-protocol=any" ; shift 1 ;;
    -d | --debug) debug_args='--debug=true' shift 1 ;;
    -h | --help | -\?) usage ; exit 0 ;;
    *) break ;;
  esac
done


#
# main
#

detect_package_system
bootstrap_package phantomjs
phantocurl
